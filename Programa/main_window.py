# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide2 import QtCore, QtGui, QtWidgets
from map_painter import MapPainter
from core import *

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1176, 782)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, -10, 1011, 751))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("assets/map.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label.mouseReleaseEvent = self.mouseReleased

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1176, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        MainWindow.event

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.map_painter = MapPainter('assets/map.png')

        #FIXME: TEMPORARY
        MainWindow.setWindowFlags(QtCore.Qt.FramelessWindowHint)

        #Aquest codi d'aqui crea els elements necessaris per a crear
        #un graf. Pots indicar el tipus de graf (simple o dirigit) i
        #assignar un pes a l'aresta
        """
        self.cb = QtWidgets.QComboBox(self.centralwidget)
        self.cb.setGeometry(QtCore.QRect(1040, 24, 75, 23))
        self.cb.addItems(["Simple", "Dirigit"])

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(1040, 0, 75, 23))
        self.textEdit.setObjectName("textEdit")
        """

        #Widgets per a senyalar l'origen
        self.originLabel = QtWidgets.QLabel(self.centralwidget)
        self.originLabel.setGeometry(QtCore.QRect(1040, 0, 75, 23))
        self.originLabel.setText("Origen")
        self.originLabel.setObjectName("originLabel")

        self.originLat = QtWidgets.QLineEdit(self.centralwidget)
        self.originLat.setGeometry(QtCore.QRect(1040, 24, 75, 23))
        self.originLat.setPlaceholderText("Latitud")

        self.originLon = QtWidgets.QLineEdit(self.centralwidget)
        self.originLon.setGeometry(QtCore.QRect(1116, 24, 75, 23))
        self.originLon.setPlaceholderText("Longitud")

        self.setOriginButton = QtWidgets.QPushButton(self.centralwidget)
        self.setOriginButton.setGeometry(QtCore.QRect(1116+75, 24, 23, 23))
        self.setOriginButton.setText("")
        self.setOriginButton.setIcon(QtGui.QIcon("assets/marcar_localitzacio.png"))
        self.setOriginButton.setIconSize(QtCore.QSize(18,18))
        self.setOriginButton.clicked.connect(self.select_origin)

        #Widgets per a senyalar el desti
        self.goalLabel = QtWidgets.QLabel(self.centralwidget)
        self.goalLabel.setGeometry(QtCore.QRect(1040, 48, 75, 23))
        self.goalLabel.setText("Destí")
        self.goalLabel.setObjectName("goalLabel")

        self.goalLat = QtWidgets.QLineEdit(self.centralwidget)
        self.goalLat.setGeometry(QtCore.QRect(1040, 72, 75, 23))
        self.goalLat.setPlaceholderText("Latitud")

        self.goalLon = QtWidgets.QLineEdit(self.centralwidget)
        self.goalLon.setGeometry(QtCore.QRect(1116, 72, 75, 23))
        self.goalLon.setPlaceholderText("Longitud")

        self.setGoalButton = QtWidgets.QPushButton(self.centralwidget)
        self.setGoalButton.setGeometry(QtCore.QRect(1116+75, 72, 23, 23))
        self.setGoalButton.setText("")
        self.setGoalButton.setIcon(QtGui.QIcon("assets/marcar_localitzacio.png"))
        self.setGoalButton.setIconSize(QtCore.QSize(18,18))
        self.setGoalButton.clicked.connect(self.select_goal)

        #Boto per a calcular cami/ruta
        self.calculateButton = QtWidgets.QPushButton(self.centralwidget)
        self.calculateButton.setGeometry(QtCore.QRect(1040, 96, 75, 23))
        self.calculateButton.setObjectName("CalculateButton")
        self.calculateButton.setText("Calcular")
        self.calculateButton.clicked.connect(self.calculate_path)

        #Indicador per al desti
        self.pinLabel = QtWidgets.QLabel(self.centralwidget)
        self.pinLabel.setScaledContents(True)
        self.pinLabel.setGeometry(QtCore.QRect(0,0,16,26))
        self.pinLabel.setText("")
        self.pinLabel.setObjectName("pinLabel")
        self.pinLabel.setPixmap(QtGui.QPixmap("assets/marcador.png"))
        self.pinLabel.hide()

        #Indicador per a l'origen
        self.circleLabel = QtWidgets.QLabel(self.centralwidget)
        self.circleLabel.setScaledContents(True)
        self.circleLabel.setGeometry(QtCore.QRect(0,0,16,16))
        self.circleLabel.setText("")
        self.circleLabel.setObjectName("circlenLabel")
        self.circleLabel.setPixmap(QtGui.QPixmap("assets/indicador.png"))
        self.circleLabel.hide()

        self.resetButton = QtWidgets.QPushButton(self.centralwidget)
        self.resetButton.setGeometry(QtCore.QRect(1116, 96, 23, 23))
        self.resetButton.setObjectName("ResetButton")
        self.resetButton.setText("R")
        self.resetButton.clicked.connect(self.reset_route)

        #Selecció de mode, ruta o camí
        self.cb_label = QtWidgets.QLabel(self.centralwidget)
        self.cb_label.setGeometry(QtCore.QRect(1040, 120, 75, 23))
        self.cb_label.setText("Mode:")
        self.cb_label.setObjectName("cbLabel")

        self.cb = QtWidgets.QComboBox(self.centralwidget)
        self.cb.setGeometry(QtCore.QRect(1116-40, 120, 62, 23))
        self.cb.addItems(["Camí", "Ruta"])
        self.cb.currentIndexChanged.connect(self.change_mode)

        #Widgets de ruta
        self.routeLabel = QtWidgets.QLabel(self.centralwidget)
        self.routeLabel.setGeometry(QtCore.QRect(1040, 48, 75, 23))
        self.routeLabel.setText("Ruta")
        self.routeLabel.setObjectName("routeLabel")
        self.routeLabel.hide()

        self.routeComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.routeComboBox.setGeometry(QtCore.QRect(1040, 72, 75*2, 23))
        self.routeComboBox.addItems(['Monuments', 'Museus', 'Lloc emblemàtics', 'Parcs', 'Oci nocturn', "Llocs popular d'Instagram", 'Exposicions', 'Atraccions turistiques'])
        self.routeComboBox.hide()

        #"""     

        # 0 = Cami; 1 = Ruta
        self.mode = 0
        self.firstClick = True
        self.sim = True

        self.originVertex = 0
        self.goalVertex = 0

        self.g = Graph()
        self.g_val = list(self.g.vertex_coord.values())


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))       


    #Aquesta funció et permet marcar les interseccions (vertex del graf) al mapa
    #i ho escriu a un archiu .csv per a que després el programa 'metaprogram.py'
    #et doni el codi per els botons i les seves funcions. Aquests t'ajudaran a indicar
    #arestes i els seus pesos
    def mouseReleased(self, QMouseEvent):
        if QMouseEvent.button() != QtCore.Qt.MouseButton.LeftButton:
            return
        """
        f = open("vertexs.csv", "a")
        f.write(f"{QMouseEvent.x()},{QMouseEvent.y()}\n")
        f.close()

        p = MapPainter('test_map.png')
        p.paint_points(pos=(QMouseEvent.x(),QMouseEvent.y()),r=10)
        self.label.setPixmap(QtGui.QPixmap("test_map.png"))
        """
        cv = self.g.find_closest((np.int64(QMouseEvent.x()), np.int64(QMouseEvent.y())))
        x = self.g.vertex_coord[cv][0]
        y = self.g.vertex_coord[cv][1]

        print(cv)

        oLat, oLon = self.map_painter.img_to_coord(x,y)

        if self.mode == 1:
            self.firstClick = True

        if self.firstClick:
            w = self.circleLabel.geometry().width()
            h = self.circleLabel.geometry().height()

            self.circleLabel.move(x-0.5*w,y-0.5*h)
            self.circleLabel.show()

            self.originLat.setText(f"{round(oLat,4)}")
            self.originLon.setText(f"{round(oLon,4)}")
            self.firstClick = False
            self.originVertex = cv
        else:
            w = self.pinLabel.geometry().width()
            h = self.pinLabel.geometry().height()

            self.pinLabel.move(x-(w/2.0),y-h)
            self.pinLabel.show()

            self.goalLat.setText(f"{round(oLat,4)}")
            self.goalLon.setText(f"{round(oLon,4)}")
            self.firstClick = True
            self.goalVertex = cv

        self.label.setFocus()
        #"""

    def select_origin(self):
        self.firstClick = True

    def select_goal(self):
        self.firstClick = False

    def reset_route(self):
        self.label.setPixmap(QtGui.QPixmap('assets/map.png'))
        self.pinLabel.hide()
        self.circleLabel.hide()
        
        self.originLat.setText("")
        self.originLon.setText("")
        self.goalLat.setText("")
        self.goalLon.setText("")

        self.firstClick = True
        self.originVertex = 0
        self.goalVertex = 0

        self.map_painter.set_map('assets/map.png')

    def calculate_path(self):
        if self.originVertex == 0 or self.goalVertex == 0:
            return

        originVertex = self.originVertex
        goalVertex = self.goalVertex

        #Els pesos no són utilitzats en aquest lloc, però serà útil per al pròxim
        path, w = Dijkstra(self.g, originVertex, goalVertex)

        if path:
            print(path)
            self.map_painter.set_map('assets/map.png')
            self.map_painter.set_route(self.g.route_to_coords(path))
            self.map_painter.paint_map('assets/result_map.png')
            self.label.setPixmap(QtGui.QPixmap('assets/result_map.png'))

        else:
            print("There's no route!")

#FIXME: Finish me!
    def calculate_route(self):
        if self.originVertex == 0 or not self.originLat.text() or not self.originLon.text():
            return
        
        originVertex = self.originVertex
        routeCaract = str(self.routeComboBox.currentIndex() + 1) #L'índex comença per 0, però necessitem que comenci per 1

        #Dict key is vertex
        dist = {}
        routes = {}

        print(f"Finding route with caract: {routeCaract}")

        taggedVertices = self.g.find_vertices_with_tag(routeCaract)

        if not taggedVertices:
            print("ERROR: taggedVertices list is empty!")
            print(f"INFO: caract: {routeCaract}, origin: {originVertex}")
            return

        routeList = []
        routeList.append(originVertex)

        #Busca els camins des del vertex origen fins a tots els que compleixen la caracteristica
        #després, agafa el que té el camí més curt i el posa com a origen a la següent iteració.
        #Quan tots els vèrtex estan ordenats, trenca el bucle
        while True:
            for v in taggedVertices:
                route, w = Dijkstra(self.g, routeList[-1], v)
                dist[v] = w
                routes[v] = route

            vertex = 0
            distance = INFINITY
            if not taggedVertices:
                break

            for v in taggedVertices:
                if dist[v] < distance:
                    distance = dist[v]
                    vertex = v
            routeList.append(vertex)
            taggedVertices.remove(vertex)

        route = []
        #Evita que el camí passi per vèrtexs anteriors per a evitar confusions
        restriction = {}
        for i in range(0, len(routeList)):
            if i == 0:
                continue
            r, w, restr = Dijkstra_Restricted(self.g, routeList[i-1], routeList[i], restriction)
            route += r 
            restriction = restr
            print(f"Route {i}: {r}")

        if route:
            self.map_painter.set_map('assets/map.png')
            self.map_painter.set_route(self.g.route_to_coords(route))
            self.map_painter.paint_map('assets/result_map.png')
            self.label.setPixmap(QtGui.QPixmap('assets/result_map.png'))
        else:
            print("ERROR: Empty route!")


    def change_mode(self):
        if self.cb.currentText() == 'Camí':
            self.mode = 0
            self.calculateButton.clicked.disconnect()
            self.calculateButton.clicked.connect(self.calculate_path)

            self.routeLabel.hide()
            self.routeComboBox.hide()

            self.goalLabel.show()
            self.goalLat.show()
            self.goalLon.show()
            self.setGoalButton.show()
        else:
            self.mode = 1
            self.calculateButton.clicked.disconnect()
            self.calculateButton.clicked.connect(self.calculate_route)

            self.goalLabel.hide()
            self.goalLat.hide()
            self.goalLon.hide()
            self.setGoalButton.hide()
            self.pinLabel.hide()

            self.routeLabel.show()
            self.routeComboBox.show()

